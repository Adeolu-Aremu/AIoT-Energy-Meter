/*****************************************************************************************
  Dual PZEM Energy Meter with AI Prediction, Keypad, LCD, Relays, Blynk, and Serial Print
******************************************************************************************/

// Blynk Cloud template and authentication info
#define BLYNK_TEMPLATE_ID   "TMPL2soKZpER7"            // Unique Blynk Template ID
#define BLYNK_TEMPLATE_NAME "AI IOT Energy Meter"       // Template name on Blynk
#define BLYNK_AUTH_TOKEN    "kTuu0FfH1rPRcnUsY9k8Vy3nxiI4Acpb"  // Blynk authentication token

#define BLYNK_PRINT Serial  // Enable serial debug prints from Blynk library

// Include required libraries
#include <WiFi.h>                   // ESP32 WiFi core
#include <WiFiClient.h>             // For HTTP/HTTPS requests
#include <BlynkSimpleEsp32.h>       // Blynk support for ESP32
#include <PZEM004Tv30.h>            // Library for PZEM energy meter
#include <Wire.h>                   // I2C communication
#include <LiquidCrystal_I2C.h>      // I2C LCD library
#include <Keypad.h>                 // 4x4 matrix keypad
#include <WiFiClientSecure.h>       // HTTPS client for secure connections
#include <HTTPClient.h>             // For HTTP POST/GET
#include <ArduinoJson.h>            // JSON handling for API interaction

// WiFi credentials
char ssid[] = "Energy_IOT";        // SSID of the WiFi network
char pass[] = "energy1234";        // Password of the WiFi network

BlynkTimer timer;  // Create Blynk timer for scheduling tasks

// PZEM sensor setup using Serial2 (GPIO16 RX, GPIO17 TX) and Serial1 (GPIO4 RX, GPIO5 TX)
PZEM004Tv30 pzem1(Serial2, 16, 17);  // PZEM sensor 1
PZEM004Tv30 pzem2(Serial1, 4, 5);    // PZEM sensor 2

// LCD setup with I2C address 0x27, 16 columns, 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);  // LCD object

// Keypad configuration (4x4 matrix keypad)
const byte ROWS = 4, COLS = 4;
char keys[ROWS][COLS] = {             // Key layout
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {13, 12, 14, 27};  // Row pin connections
byte colPins[COLS] = {26, 25, 33, 32};  // Column pin connections
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);  // Create keypad object

// Relay pin definitions
#define RELAY1 18  // Relay 1 control pin
#define RELAY2 19  // Relay 2 control pin

// Variables to hold readings from PZEM sensors
float voltage1, current1, power1, energy1;  // Sensor 1 values
float voltage2, current2, power2, energy2;  // Sensor 2 values

// Threshold values for energy limits (can be set via keypad or Blynk)
float threshold1 = -1, threshold2 = -1;  // Default -1 means not set
bool relay1State = true, relay2State = true;  // Relay states (true = ON)

// Variables for keypad-based threshold input
bool setMode1 = false, setMode2 = false;  // Flags to track input mode
String input1 = "", input2 = "";          // User input strings for thresholds

// Temporary message control for LCD
bool showTempMessage = false;              // Flag to indicate message is being shown
unsigned long tempMsgStart = 0, tempMsgDuration = 0;  // Timer for temporary message

// AI predicted power usage value (from cloud API)
float predicted_kW = 0;  // kW prediction output
bool showPrediction = false;  // Whether to show prediction on LCD

// Constants defining safe operating ranges
#define MIN_VOLTAGE 180.0  // Minimum voltage threshold
#define MAX_VOLTAGE 250.0  // Maximum voltage threshold
#define MAX_CURRENT 10.0   // Maximum current threshold

// Function to initialize relay pins and set to OFF (assuming active LOW relay)
void setupRelays() {
  pinMode(RELAY1, OUTPUT);  // Set relay1 as output
  pinMode(RELAY2, OUTPUT);  // Set relay2 as output
  digitalWrite(RELAY1, HIGH);  // Set relay1 OFF (HIGH = inactive for active LOW relay)
  digitalWrite(RELAY2, HIGH);  // Set relay2 OFF
}

// Function to display a temporary message on the LCD
void showMessage(const String &line1, const String &line2, unsigned long duration) {
  lcd.clear(); yield();                   // Clear LCD and yield CPU
  lcd.setCursor(0, 0); lcd.print(line1);  // Print first line
  lcd.setCursor(0, 1); lcd.print(line2);  // Print second line
  showTempMessage = true;                // Set message flag
  tempMsgStart = millis();               // Record start time
  tempMsgDuration = duration;            // Set duration for message
}

// Function to read values from PZEM sensors
void readSensors() {
  // Read values from PZEM1
  voltage1 = pzem1.voltage(); 
  current1 = pzem1.current();
  power1 = pzem1.power(); 
  energy1 = pzem1.energy();

  // Read values from PZEM2
  voltage2 = pzem2.voltage(); 
  current2 = pzem2.current();
  power2 = pzem2.power(); 
  energy2 = pzem2.energy();

  // Print the sensor values to Serial Monitor
  Serial.println("=== SENSOR READINGS ===");
  Serial.printf("Sensor1 - V: %.1f, C: %.1f, P: %.1f, E: %.1f\n", voltage1, current1, power1, energy1*1000);
  Serial.printf("Sensor2 - V: %.1f, C: %.1f, P: %.1f, E: %.1f\n", voltage2, current2, power2, energy2*1000);
}

// Function to send sensor readings and AI prediction to Blynk cloud via HTTP GET
void sendBlynk() {
  if (WiFi.status() != WL_CONNECTED) return;  // Exit if WiFi not connected

  HTTPClient http;  // Create HTTP client object
  String url = "https://blynk.cloud/external/api/batch/update?token=" + String(BLYNK_AUTH_TOKEN);

  // Append all virtual pin values to the URL
  url += "&v0=" + String(voltage1, 2);        // Virtual pin V0 = voltage1
  url += "&v1=" + String(current1, 2);        // V1 = current1
  url += "&v2=" + String(power1, 2);          // V2 = power1
  url += "&v3=" + String(energy1 * 1000, 2);  // V3 = energy1 in Wh
  url += "&v4=" + String(voltage2, 2);        // V4 = voltage2
  url += "&v5=" + String(current2, 2);        // V5 = current2
  url += "&v6=" + String(power2, 2);          // V6 = power2
  url += "&v7=" + String(energy2 * 1000, 2);  // V7 = energy2 in Wh
  url += "&v14=" + String(predicted_kW, 2);   // V14 = predicted kW from AI model

  http.begin(url);  // Open the URL
  int httpCode = http.GET();  // Send GET request and receive status code

  // Log the result to Serial
  if (httpCode > 0) {
    Serial.printf("[Blynk] Batch update sent: HTTP %d\n", httpCode);
  } else {
    Serial.printf("[Blynk] Batch update failed: HTTP %d\n", httpCode);
  }

  http.end();  // Close the HTTP connection
}
// Function to fetch AI-based energy prediction from external API
void fetchPrediction() {
  if (WiFi.status() != WL_CONNECTED) {  // Check if WiFi is connected
    Serial.println("WiFi not connected!");  // Print error message if not connected
    return;  // Exit the function if no connection
  }

  WiFiClientSecure client;  // Create secure client for HTTPS
  client.setInsecure();  // Disable SSL certificate validation (not recommended for production)

  HTTPClient http;  // Create HTTP client instance
  http.begin(client, "https://energy-api-3ola.onrender.com/predict");  // Set API endpoint
  http.addHeader("Content-Type", "application/json");  // Set content-type to JSON

  // Define average weather values used as input to the model
  const float avg_air_temperature = 17.871834;
  const float avg_humidity = 60.644178;
  const float avg_pressure = 734.588143;
  const float avg_wind_speed = 4.828268;

  DynamicJsonDocument doc(8192);  // Create a large JSON document for request payload
  JsonArray sequence = doc.createNestedArray("sequence");  // Create an array named "sequence"

  for (int i = 23; i >= 0; i--) {  // Loop for 24 hours backward
    time_t t = time(nullptr) - i * 3600;  // Get timestamp for each hour
    struct tm *ptm = localtime(&t);  // Convert to local time structure
    JsonObject step = sequence.createNestedObject();  // Create object for each hour
    step["air_temperature"] = avg_air_temperature;  // Assign weather values
    step["relative_humidity"] = avg_humidity;
    step["air_pressure"] = avg_pressure;
    step["wind_speed"] = avg_wind_speed;
    step["hour"] = ptm->tm_hour;  // Extract hour from timestamp
    step["dayofweek"] = ptm->tm_wday;  // Extract day of week
    step["month"] = ptm->tm_mon + 1;  // Extract month (0-based to 1-based)
  }

  String requestBody;
  serializeJson(doc, requestBody);  // Convert JSON document to string

  int httpResponseCode = http.POST(requestBody);  // Send POST request with JSON body
  if (httpResponseCode == 200) {  // If successful response
    String response = http.getString();  // Get response payload
    DynamicJsonDocument resDoc(512);  // Small document to hold response
    deserializeJson(resDoc, response);  // Parse JSON response
    float normalized = resDoc["prediction"];  // Extract normalized prediction
    predicted_kW = normalized * 1592.89;  // Convert to actual kW using scaling factor
    showPrediction = true;  // Enable display of prediction
    Blynk.logEvent("prediction_update", "AI forecast: " + String(predicted_kW, 1) + " kW");  // Log event to Blynk
    Serial.printf("Predicted: %.2f kW\n", predicted_kW);  // Print prediction to Serial Monitor
  } else {
    Serial.printf("Prediction request failed. HTTP code: %d\n", httpResponseCode);  // Log failure
  }
  http.end();  // End HTTP session
}

// Function to handle keypad input for threshold and relay control
void handleKeyPress(char key) {
  String *input = nullptr;  // Pointer to input string
  float *threshold = nullptr;  // Pointer to threshold value

  if (setMode1 || setMode2) {  // If in threshold setting mode
    input = setMode1 ? &input1 : &input2;  // Choose appropriate input string
    threshold = setMode1 ? &threshold1 : &threshold2;  // Choose appropriate threshold pointer

    if (key >= '0' && key <= '9' && input->length() < 6) {  // If number key pressed and input not too long
      *input += key;  // Append digit
    } else if (key == '#') {  // If '#' pressed, finalize threshold input
      if (input->length() > 0) {
        *threshold = input->toFloat();  // Convert input to float and assign
        showMessage("Threshold Set", String(*threshold) + " kWh", 2000);  // Show confirmation
        Blynk.logEvent("Threshold_Set", "Threshold Set");  // Log to Blynk
      }
      setMode1 = setMode2 = false; *input = "";  // Exit threshold setting mode
    } else if (key == '*') {  // If '*' pressed, cancel input
      setMode1 = setMode2 = false; *input = "";
      showMessage("Cancelled", "", 1500);  // Show cancel message
      Blynk.logEvent("Threshold_Set", "Cancelled");  // Log to Blynk
    }
    lcd.clear(); lcd.setCursor(0, 0); lcd.print("Set Threshold");
    lcd.setCursor(0, 1); lcd.print(*input + " kWh");  // Display current input
  } else {  // If not in threshold input mode, process control keys
    switch (key) {
      case 'A':  // Toggle Relay 1
        relay1State = !relay1State;
        digitalWrite(RELAY1, relay1State ? LOW : HIGH);
        Blynk.virtualWrite(V8, relay1State); 
        Blynk.logEvent("relay1_toggle", relay1State ? "Relay 1 turned ON" : "Relay 1 turned OFF");
        break;

      case 'B':  // Toggle Relay 2
        relay2State = !relay2State;
        digitalWrite(RELAY2, relay2State ? LOW : HIGH);
        Blynk.virtualWrite(V9, relay2State); 
        Blynk.logEvent("relay1_toggle", relay2State ? "Relay 2 turned ON" : "Relay 2 turned OFF");
        break;

      case 'C':  // Start setting threshold for Sensor 1
        setMode1 = true; input1 = "";
        lcd.clear(); lcd.print("Input T1 (kWh)");
        break;

      case 'D':  // Start setting threshold for Sensor 2
        setMode2 = true; input2 = "";
        lcd.clear(); lcd.print("Input T2 (kWh)");
        break;

      case '#':  // Reset energy for Sensor 1
        pzem1.resetEnergy();
        showMessage("Energy1 Reset!", "", 1500);
        Blynk.logEvent("energy1_reset", "Energy 1 reset via keypad");
        break;

      case '*':  // Reset energy for Sensor 2
        pzem2.resetEnergy();
        showMessage("Energy2 Reset!", "", 1500);
        Blynk.logEvent("energy1_reset", "Energy 2 reset via keypad");
        break;
    }
  }
}

// Function to enforce safety and threshold-based relay control
void enforceLimits() {
  // Check if threshold1 is valid and energy1 has reached it while Relay1 is still ON
  if (threshold1 > 0 && energy1 >= threshold1 && relay1State) {
    relay1State = false;                           // Update the internal state
    digitalWrite(RELAY1, HIGH);                    // Turn OFF relay (active HIGH)
    showMessage("Limit E1 Hit", "Relay 1 OFF", 2000); // Show alert on LCD
    Blynk.logEvent("relay1_toggle", "Sensor 1 limit exceeded"); // Notify on Blynk
  }

  // Same logic for sensor 2 and relay 2
  if (threshold2 > 0 && energy2 >= threshold2 && relay2State) {
    relay2State = false;
    digitalWrite(RELAY2, HIGH);
    showMessage("Limit E2 Hit", "Relay 2 OFF", 2000);
    Blynk.logEvent("relay1_toggle", "Sensor 2 limit exceeded");
  }

  // Voltage or current fault check for relay 1
  if ((voltage1 < MIN_VOLTAGE || voltage1 > MAX_VOLTAGE || current1 > MAX_CURRENT) && relay1State) {
    relay1State = false;
    digitalWrite(RELAY1, HIGH);
    showMessage("Fault E1", "Relay 1 OFF", 2000);
    Blynk.logEvent("fault_e1", "Fault E1, Relay 1 OFF");
  }

  // Fault check for relay 2
  if ((voltage2 < MIN_VOLTAGE || voltage2 > MAX_VOLTAGE || current2 > MAX_CURRENT) && relay2State) {
    relay2State = false;
    digitalWrite(RELAY2, HIGH);
    showMessage("Fault E2", "Relay 2 OFF", 2000);
    Blynk.logEvent("fault_e1", "Fault E2, Relay 2 OFF");
  }
}

// Function to update LCD screen with 3 views in rotation
void updateLCD() {
  if (showTempMessage || setMode1 || setMode2) return; // Skip if temp message or input mode is active

  static int state = 0;
  state = (state + 1) % 3;  // Switch display every time it's called

  lcd.clear(); yield();     // Clear LCD screen

  if (state == 0) {
    // Show Sensor 1 readings
    lcd.setCursor(0, 0); lcd.print("V1:" + String(voltage1, 0) + " C1:" + String(current1, 1));
    lcd.setCursor(0, 1); lcd.print("P1:" + String(power1, 1) + " E1:" + String(energy1*1000, 1));
  } else if (state == 1) {
    // Show Sensor 2 readings
    lcd.setCursor(0, 0); lcd.print("V2:" + String(voltage2, 0) + " C2:" + String(current2, 1));
    lcd.setCursor(0, 1); lcd.print("P2:" + String(power2, 1) + " E2:" + String(energy2*1000, 1));
  } else {
    // Show AI forecast
    lcd.setCursor(0, 0); lcd.print("AI Forecast:");
    lcd.setCursor(0, 1); lcd.print(String(predicted_kW, 1) + " Wh");
  }
}

// Clear temporary message after display duration has passed
void clearTempMessage() {
  if (showTempMessage && millis() - tempMsgStart >= tempMsgDuration) {
    showTempMessage = false;
    lcd.clear();
  }
}

// Blynk control for Relay 1
BLYNK_WRITE(V8) {
  relay1State = param.asInt();                             // Get new state
  digitalWrite(RELAY1, relay1State ? LOW : HIGH);          // Set relay pin
  Blynk.logEvent("relay1_toggle", relay1State ? "Relay 1 ON via Blynk" : "Relay 1 OFF via Blynk");
}

// Blynk control for Relay 2
BLYNK_WRITE(V9) {
  relay2State = param.asInt();
  digitalWrite(RELAY2, relay2State ? LOW : HIGH);
  Blynk.logEvent("relay1_toggle", relay2State ? "Relay 2 ON via Blynk" : "Relay 2 OFF via Blynk");
}

// Threshold 1 update from Blynk
BLYNK_WRITE(V10) {
  threshold1 = param.asFloat();
  showMessage("T1 from Blynk", String(threshold1) + " kWh", 2000);
  Blynk.logEvent("Threshold_Set", "Threshold 1 Set");
}

// Threshold 2 update from Blynk
BLYNK_WRITE(V11) {
  threshold2 = param.asFloat();
  showMessage("T2 from Blynk", String(threshold2) + " kWh", 2000);
  Blynk.logEvent("Threshold_Set", "Threshold 2 Set");
}

// Energy 1 reset via Blynk
BLYNK_WRITE(V12) {
  if (param.asInt()) {
    pzem1.resetEnergy();
    showMessage("Energy1 Reset", "via Blynk", 1500);
    Blynk.logEvent("energy1_reset", "Energy 1 reset via Blynk");
  }
}

// Energy 2 reset via Blynk
BLYNK_WRITE(V13) {
  if (param.asInt()) {
    pzem2.resetEnergy();
    showMessage("Energy2 Reset", "via Blynk", 1500);
    Blynk.logEvent("energy1_reset", "Energy 2 reset via Blynk");
  }
}

// Setup function runs once at startup
void setup() {
  Serial.begin(115200);                            // Start Serial Monitor
  Serial1.begin(9600, SERIAL_8N1, 4, 5);           // PZEM sensor 2
  Serial2.begin(9600, SERIAL_8N1, 16, 17);         // PZEM sensor 1

  Wire.begin(); Wire.setClock(100000);            // Initialize I2C for LCD
  lcd.init(); lcd.backlight();                    // Start LCD

  // Welcome screen
  lcd.clear(); lcd.setCursor(0, 0); lcd.print("AI-IOT Meter");
  lcd.setCursor(0, 1); lcd.print("by Aremu Adeolu");
  delay(3000);

  // Connect to WiFi with progress on LCD
  lcd.clear(); lcd.setCursor(0, 0); lcd.print("Connecting WiFi");
  int dotCount = 0; unsigned long lastDot = millis();
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    if (millis() - lastDot > 500) {
      lcd.setCursor(0, 1); lcd.print("Connecting");
      for (int i = 0; i < dotCount; i++) lcd.print(".");
      dotCount = (dotCount + 1) % 4;
      lastDot = millis();
    }
    delay(50);
  }
  lcd.setCursor(0, 1); lcd.print("WiFi Connected "); delay(1000);

  // Connect to Blynk with progress
  lcd.clear(); lcd.setCursor(0, 0); lcd.print("Connecting Blynk");
  dotCount = 0; lastDot = millis();
  Blynk.config(BLYNK_AUTH_TOKEN);
  while (!Blynk.connect()) {
    if (millis() - lastDot > 500) {
      lcd.setCursor(0, 1); lcd.print("Connecting");
      for (int i = 0; i < dotCount; i++) lcd.print(".");
      dotCount = (dotCount + 1) % 4;
      lastDot = millis();
    }
    delay(50);
  }
  lcd.setCursor(0, 1); lcd.print("Blynk Connected "); delay(1000);

  configTime(0, 0, "pool.ntp.org", "time.nist.gov");  // NTP sync for time

  setupRelays();  // Set relay pins and states

  // Setup timers for periodic tasks
  timer.setInterval(3000L, readSensors);
  timer.setInterval(5000L, sendBlynk);
  timer.setInterval(2500L, updateLCD);
  timer.setInterval(1000L, enforceLimits);
  // timer.setInterval(200L, handleKeypad); // Disabled keypad scan
  timer.setInterval(500L, clearTempMessage);
  timer.setInterval(60000L, fetchPrediction);  // Call ML API every 1 min
}

// Continuously scan the keypad manually instead of timed interval
void pollKeypad() {
  static char lastKey = '\0';
  char key = keypad.getKey();
  if (key && key != lastKey) {
    Serial.print("Key Pressed: "); Serial.println(key); // Debug print
    lastKey = key;
    handleKeyPress(key);  // Custom handler function
  } else if (!key) {
    lastKey = '\0';  // Reset key state
  }
}

// Main loop keeps running timers and Blynk connection
void loop() {
  Blynk.run();      // Maintain Blynk connection
  timer.run();      // Run all scheduled tasks
  pollKeypad();     // Continuously check keypad input
  yield();          // Allow background tasks
}
